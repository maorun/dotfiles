return {
    {
        'gsuuon/model.nvim',
        dependencies = {
            'folke/which-key.nvim',
            'nvim-treesitter/nvim-treesitter'
        },
        init = function()
            local model = require('model')
            vim.filetype.add({
                extension = {
                    mchat = 'mchat',
                }
            })

            local hf = require('model.providers.huggingface')
            local openai = require('model.providers.openai')
            local starterPrompts = require('model.prompts.starters')
            local prompts = vim.tbl_extend('force', starterPrompts, {
                nodejsConvert = {
                    provider = openai,
                    mode = require('model').mode.INSERT_OR_REPLACE,
                    builder = function(input, context)
                        local code = input
                        return {
                            messages = {
                                {
                                    role = 'user',
                                    content =
                                        'Your mission is to convert given code to a nodejs-code. Don\'t describe or hinting the code. Only clean code. Here is the code to convert: ``` ' ..
                                        code .. ' ```'
                                }
                            }
                        }
                    end,
                },
                commit = {
                    provider = openai,
                    mode = require('model').mode.REPLACE,
                    builder = function()
                        local cwd = vim.fn.expand('%:h:h')
                        local git_diff = vim.fn.system { 'git', '-C', cwd, 'diff', '--staged', '-U0' }

                        if not git_diff:match('^diff') then
                            error('Git error:\n' .. git_diff)
                        end

                        return {
                            messages = {
                                {
                                    role = 'user',
                                    content =
                                        'Your mission is to create clean and comprehensive commit messages as per the conventional commit convention and explain WHAT were the changes and mainly WHY the changes were done. Try to stay below 80 characters total. Staged git diff: ```\n' ..
                                        git_diff ..
                                        '\n```. After an additional newline, add a short description in 1 to 4 sentences of WHY the changes are done after the commit message. Don\'t start it with "This commit", just describe the changes. Use the present tense. Lines must not be longer than 74 characters.'
                                }
                            }
                        }
                    end,
                }
            })

            local asksQuestions =
            ' You ask a couple of questions to understand the requirements which are generated by you from a description of a problem or task. You ask only one question at a time so i can answer it. you give no implementation suggestions.'

            local productManager =
            'I want you to act as a product or project manager for a software development company, overseeing the entire product lifecycle from ideation to launch and beyond, defining the product vision, strategy, and ensuring continuous improvement post-launch.'

            local projectManager =
            'I want you to act as a Project Manager, coordinating project activities, managing timelines, resources, and risks, and ensuring the successful delivery of the project according to the stakeholders\' expectations.'

            local techArchitect =
            'I want you to act as a virtual tech architect, taking user requirements from the product manager and breaking them down into detailed technical guidance for a DevOps team and a tech lead, ensuring alignment with system architecture and best practices.'

            local promptChecker =
            'I want you to act as a prompt checker which checks a given prompt. the Answer should be short. rate the prompt an a scale from 1 to 10 how good the prompt is. You should not write why the prompt is bad or could be better. If the prompt is 10, just say "10" otherwise give a better version (a 10) of the prompt and rate this prompt. Start again with "I want you to act as a ".'

            -- from techArchitect
            local devOps =
            'I want you to act as a DevOps engineer, implementing detailed technical plans provided by a tech architect, focusing on deployment automation, monitoring system performance, and ensuring continuous operation.'

            local techLead =
            'I want you to act as a tech lead, interpreting detailed technical guidance from a tech architect and breaking it down into specific, manageable development tasks for the engineering team.'
            -- reviews code and give it to qaEngineer

            local developer =
            'I want you to act as a developer, efficiently executing specific, manageable development tasks assigned by a tech lead, ensuring code quality and adherence to project timelines.'

            local qaEngineer =
            'I want you to act as a QA engineer, meticulously testing software developed by the team, identifying bugs, reporting issues with clarity, and verifying fixes to ensure the highest quality product before release.'

            local uxEngineer =
            'I want you to act as a UX Engineer, translating design concepts into functional user interfaces, ensuring technical feasibility, and maintaining the intended user experience across different devices and platforms.'

            local customerSupport =
            'I want you to act as a customer support specialist, providing timely and empathetic help to customers, addressing their questions or issues, and ensuring a positive experience with our product through effective communication and problem-solving.'

            local techWriter =
            'I want you to act as a Technical Writer to create clear, user-friendly documentation for our software product, ensuring accurate, up-to-date information is available for both end-users and the internal team.'

            local core = {
                role = 'I want you to act as a {role}. {description}. {task}.',
                communicate = 'You act only as a {role} and communicate with me as a {user}. Consider this as we talk.',
                code =
                'Du gibst keine Kommentare oder Erklärungen ab und konzentrierst dich auf präzisen, funktionalen Code. Keine Hinweise, keine Anleitung, nur Code in nur ein einzigen codeabschnitt.',
                tasks = {
                    askQuestions =
                    'You ask a couple of questions. You ask only one question at a time so i can answer it. you give no implementation suggestions. You don\'t ask question that i cannot answer.'
                }
            }

            local p = {
                productManager = {
                    role = 'product or project manager for a software development company',
                    description =
                    'You overseeing the entire product lifecycle from ideation to launch and beyond, defining the product vision, strategy, and ensuring continuous improvement post-launch.',
                    tasks = {
                        questions =
                            'To understand the requirements which are generated by you from a description of a problem or tash: ' ..
                            core.tasks.askQuestions
                    },
                },
                techArchitect = {
                    role = 'virtual tech architect',
                    description = 'You ensuring alignment with system architecture and best practices',
                    tasks = {
                        formTechnicalGuidanceForDevOps =
                        'You are taking user requirements from the product manager and breaking them down into detailed technical guidance for a DevOps excluding tech-lead-tasks. You don\t ask questions and are creative if something is unclear in the requirements.',
                        formTechnicalGuidanceForTechLead =
                        'You are taking user requirements from the product manager and breaking them down into detailed technical guidance for a tech lead excluding devOps-tasks. You don\t ask questions and are creative if something is unclear in the requirements.',
                    }
                },
                devOps = {
                    role = 'DevOps engineer',
                    description =
                    'You are implementing detailed technical plans, focusing on deployment automation, monitoring system performance, and ensuring continuous operation.',
                    tasks = {
                        breakDown =
                        '{communicate} You breaking down step by step the requirements of the tech architect. To extract the steps seperate the steps in your answer by `---`. {code}',
                        implementStep = '{code} You implement the following step: {step}.',
                    },
                },
                techLead = {
                    role = 'tech lead, who are leading a group of software developers.',
                    description = '',
                    tasks = {
                        breakDown =
                        'You interpreting detailed technical guidance from a tech architect and breaking it down into specific, manageable development tasks for the developer team. to extract the tasks seperate the steps in your answer by `---',
                        checkCode =
                        'You are checking if the requirement meets the implementation. The requirement: {requirement}. The implementation: {implementation}',
                    },
                },
                developer = {
                    role = 'advanced software developer',
                    description =
                    'You efficiently executing specific, manageable development tasks assigned by a tech lead, ensuring code quality and adherence to project timelines.',
                    tasks = {
                        implementation = '{code} {dev_task}',
                        test = 'You are testing your code'
                    },
                }
            }

            local role = 'devOps'
            local communicationUser = 'product manager'
            local task = 'breakDown'

            local r = core.role
            r = string.gsub(r, '{description}', p[role].description)
            r = string.gsub(r, '{task}', p[role].tasks[task])
            r = string.gsub(r, '{communicate}', core.communicate)
            r = string.gsub(r, '{role}', p[role].role)
            r = string.gsub(r, '{user}', communicationUser)
            r = string.gsub(r, '{code}', core.code)

            -- print(r)


            local ollamaDefaults = {
                provider = require('model.providers.ollama'),
                params = {
                    model = 'starling-lm',
                },
                run = require('model.format.starling').chat
            }

            local chats = vim.tbl_extend('force', require('model.prompts.chats'), {
                ['Prompt checker'] = vim.tbl_extend('force', ollamaDefaults, {
                    system = promptChecker,
                    create = function(input, context)
                        return 'Prompt:' .. (context.selection and input or '')
                    end,
                }),
                -- ['Prompt generator'] = {
                --     system = 'I want you to act as a guidance to create a prompt which defines a role for an AI. This prompt should be as short as possible. The prompt should start with "I want you to act as a ". Check the prompt on a scale from 1 to 10 and create a prompt which goes to 10'

                -- },
                productManager = {
                    provider = require('model.providers.ollama'),
                    system = productManager .. asksQuestions,
                    params = {
                        model = 'starling-lm',
                    },
                    create = function(input, context)
                        return 'Topic: ' ..
                            (context.selection and input or '')
                    end,
                    run = require('model.format.starling').chat
                },
                productManagerStories = {
                    provider = require('model.providers.ollama'),
                    system =
                    'I want you to act as a Product Owner. You write stories based on the user requirements i gave you.',
                    params = {
                        model = 'starling-lm',
                    },
                    create = function(input, context)
                        return context.selection and input or ''
                    end,
                    run = require('model.format.starling').chat
                },
                review = {
                    provider = require('model.providers.ollama'),
                    system =
                    'You are an expert programmer that gives constructive feedback. Review the changes in the user\'s git diff. don\'t describe what the user has done. Suggest some improvements if you find some.',
                    params = {
                        model = 'starling-lm'
                    },
                    create = function()
                        local cwd = vim.fn.expand('%:h:h')
                        local git_diff = vim.fn.system { 'git', '-C', cwd, 'diff', '--staged', '-U0' }

                        if not git_diff:match('^diff') then
                            error('Git error:\n' .. git_diff)
                        end

                        return git_diff
                    end,
                    run = require('model.format.starling').chat
                }
            })

            model.setup({
                default_prompt = hf.default_prompt,
                chats = chats,
                prompts = prompts,
            })

            local augroup = vim.api.nvim_create_augroup("ai_model", {})
            vim.api.nvim_create_autocmd("FileType", {
                group = augroup,
                pattern = "mchat",
                command = "nnoremap <silent><buffer> <leader>w :Mchat<cr>",
            })
            vim.api.nvim_create_autocmd("FileType", {
                group = augroup,
                pattern = "gitcommit",
                callback = function()
                    local wk = require("which-key")
                    wk.register({
                        g = {
                            name = "Git",
                            c = { ":M commit<cr>", "generate message", noremap = true },
                        }
                    }, { prefix = "<leader>" })
                end
            })
        end
    }
}
